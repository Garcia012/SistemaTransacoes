@page "/"
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient

<h1>Inserir novo cartão de crédito</h1>

<div class="form-container">
    <EditForm Model="@purchaseModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="purchase-form-container">
                <div class="form-group">
                    <label for="cardNumber">Número do cartão:</label>
                    <div style="display: flex; align-items: center;">
                        <InputText id="cardNumber" class="card-number form-control" placeholder="xxxx xxxx xxxx xxxx" 
                                   @bind-Value="purchaseModel.CardNumber" oninput="formatCardNumber()" maxlength="19" />
                        <img id="cardLogo" src="" alt="Logo do Cartão" style="width: 20px; height: 20px; margin-left: 5px; display: none;" />
                    </div>
                </div>
                <div class="form-group">
                    <label>Nome impresso no cartão:</label>
                    <InputText @bind-Value="purchaseModel.HolderName" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Validade:</label>
                    <InputText @bind-Value="purchaseModel.ExpiryDate" placeholder="mm/aa" class="form-control" />
                </div>
                <div class="form-group">
                    <label>CVV:</label>
                    <InputText @bind-Value="purchaseModel.CVV" class="form-control" />
                </div>

                <button type="submit" class="btn btn-success">Enviar</button>
        </div>

        @if (successMessage != null)
        {
            <div class="alert alert-success">@successMessage</div>
        }

        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

       
    </EditForm>
</div>

    <script>
        function formatCardNumber() {
            const cardNumberInput = document.getElementById("cardNumber");
            let cleanedCardNumber = cardNumberInput.value.replace(/\D/g, ''); // Remove caracteres não numéricos

            // Formata o número do cartão com espaços a cada 4 dígitos
            cardNumberInput.value = cleanedCardNumber.replace(/(.{4})/g, '$1 ').trim();
            detectCardType(); // Chama a função de detecção após formatar o número
        }

        function detectCardType() {
            const cardNumberInput = document.getElementById("cardNumber").value;
            const cardLogo = document.getElementById("cardLogo");

            // Remove espaços e mantém apenas números
            const cleanedCardNumber = cardNumberInput.replace(/\s+/g, '');

            // Detecta a bandeira do cartão
            let cardType = null;
            if (/^4/.test(cleanedCardNumber)) {
                cardType = 'visa';
            } else if (/^5[1-5]/.test(cleanedCardNumber)) {
                cardType = 'mastercard';
            }

            // Exibe o logo do cartão
            if (cardType) {
                cardLogo.style.display = 'block';
                cardLogo.src = `./images/${cardType}.png`; // Caminho atualizado
            } else {
                cardLogo.style.display = 'none';
            }
        }

    </script>
}

@code {
    private PurchaseModel purchaseModel = new PurchaseModel();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Enviar dados do modelo para a API do backend
            var response = await HttpClient.PostAsJsonAsync("http://localhost:5179/api/transaction/create", purchaseModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Transação criada com sucesso!";
                errorMessage = null;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                successMessage = null;
                errorMessage = "Erro ao criar a transação. Tente novamente.";
            }
        }
        catch (Exception ex)
        {
            successMessage = null;
            errorMessage = $"Ocorreu um erro: {ex.Message}";
        }
    }

    public class PurchaseModel
    {
        [Required(ErrorMessage = "Número do cartão é obrigatório.")]
        public string CardNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Nome impresso no cartão é obrigatório.")]
        public string HolderName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Data de validade é obrigatória.")]
        public string ExpiryDate { get; set; } = string.Empty;

        [Required(ErrorMessage = "CVV é obrigatório.")]
        [StringLength(3, ErrorMessage = "CVV deve ter 3 dígitos.")]
        public string CVV { get; set; } = string.Empty;
    }
}
